- nest js module is what holds all controllers and services.

- separation of concern is important in nest.

- controllers are responsible for handling the incoming requests and returning the responses (choose from services logic).
- services (providers) are responsible for business logic.

- عشان نقدر نربط بين ال services and controllers من نفس ال module لازم نعمل كذا خطوة عشان يتقدروا يتعرفوا علي بعض والنست تقدر تربط بينهم بدون تدخل منك

1- بعد ما تعمل السرفس و الكنترولر هتروح ف الكنترولر و تضيف السرفس ف الكونستراكتور بتاع الكنترولر 

export class AuthController{
  constructor(private authService: AuthService){}
}

2- هتروح ف الموديول و تضيف الكنترولرز و السرفسز ف الموديول ديكوريتور

@Module({
  controllers:[AuthController],
  providers:[AuthService]
})

===
we will use docker
- docker will allow us to run our db directly on our computer without install it 
- بعد ما تسطب وتعمل الكمبوز فايل اللي فيه الكونفجريشن بتاع الداتا بيز اللي هتستخدمها 
هتعمل كمبوز للداتا بيز اللي عايز تشغلها بالامر دا 
docker compose up db-name -d 
db-name will be dev-db for this project 
-d to run in background
so it will be =>
1- docker compose up dev-db -d 
2- docker ps 
3- take id of your db then 
4- do => docker logs dbId

===
to use prisma you will
1 => npm install prisma @prisma/client
2 => npx prisma init
===

= when init happens 

1- env file will be created to store dblink and we will define it as the data in docker file like this 

DATABASE_URL="postgresql://postgres:123@localhost:5432/nest?schema=public"

2- prisma folder will be added to add schemas in it 


creating models with prisma 

// if it is users table you should name it as one (User with pascal notation) it will be stored as users

model User{ 
  id Int @id @default(autoincrement())

  email String 
  password String

  firstName String
  lastName String? هنا كدا انت بتقوله ان دا اوبشنال 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt النوع بتاع الابديت ات دا موجود تلقائي ف برزما

  
  دا بقا طريقة عمل الريليشنز بين السكيماز 
  bookmarks Bookmark[] 
  انت بتحط النوع انه اراي من سكيما تانية لو كان مثلا one to many relation

  @@map("users") دا بيقوله خلي اسم التيبل كدا ف الداتابيز 
}

وبالنسبة للريليشن ف التيبل التانية هتكون كدا 


model Bookmark{
  userId Int لازم هتحط فيلد للاي دي بتاع اليوزر اللي مربوط بيه الداتا 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  هنا بتحط الريليشن نفسها وتقوله ايه الفيلد اللي هنا بيساوي الرفرنس اللي ف المودل نفسه
   وبتعرفه ايه المودل اللي انت مربوط بيه 

onDelete: Cascade دي معناها ان لما البيرنت بتاع البوكمارك يتمسح ف هي كمان تتمسح 

  @@map("bookmarks")

  ...other fields
}

===
بعد ما تعمل السكيماز بتاعتك كلها هتعمل مايجريشن عشان يكريت التيبلز ف الداتابيز

=> npx prisma migrate dev

بعد كدا هتعمل جينيريت عشان تقدر تستخدم المودلز دي ف الجافاسكربت فايلز

=> npx prisma generate

عشان تكونكت علي الداتا بيز بتاعتك وتشوفها بقا هتستخدم الكوماند دي 

=> npx prisma studio 

تقدر كدا تروح ل اللينك اللي هيطلعلك وتشوف منه الداتا بيز وتقدر تضيف فيها داتا بايدك او تعدل عليها

===
دي كدا ملفات الداتا بيز طب عشان نقدر نكونكت عليها ونستخدمها ونجيب داتا منها محتاجين نعمل موديول تاني 
والموديول دا هيكون جواه الكونكشن دا ونقدر منه نأكسس كل حاجة لانه هيكون مربوط بالداتا بيز وهو معموله اكسبورت جلوبال 

1- create prisma-connect module with its service and controller 
2- in service we do it like this 

@Injectable()
export class PrismaConnectService extends PrismaClient {
  constructor() {
    super({
      datasources: {
        db: {
          url: 'postgresql://postgres:123@localhost:5434/nest?schema=public',
        },
      },
    });
  }
}

3- then you export the service as a with global decorator 

@Global()
@Module({
  providers: [PrismaConnectService],
  controllers: [PrismaConnectController],
  exports: [PrismaConnectService],
})

4- the module you export globally should be added in the root app.module so that we can use it every where in the app 

دا الموديول اللي هنستخدمه ف كل الموديولز عشان نكريت داتا جديدة ونجيب حاجات من الداتابيز 
وهنسجله ف كونستراكتور كل موديول هنستخدمه فيه 
===

هنعمل الفاليديشن ف ملفات ال dto 
وبعد كدا هنروح للجلوبال موديول ونحط فيه الجلوبال فاليديشن بايب 

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
    }),
  );
  await app.listen(3333);
}

=== 
هنستخدم باكدج هاش للباسورد اسمها argon2
npm i argon2 
===

في طريقتين عشان تجيب عنصر من التيبل ف الداتا بيز ف بريزما

1- findUnique() ودي انت بتدور فيها بالعناصر اليونيك بس زي الميل والباس او اليوزرنيم
const user = await this.prisma.user.findUnique({
      where: { email: dto.email },
});

2- findFirst() دي انت بتدور فيها بأي عنصر عادي 

===

jwt auth in nest 

to use it we need to install these packages: 
- npm i @nestjs/jwt @nestjs/passport passport passport-jwt
- npm i -D @types/passport-jwt



////
testing 

    "test:e2e": "jest --watch --no-cache --config ./test/jest-e2e.json"

هنكتب السكربت دا ف الباكدج جيسون سكربت 
دا واحنا بنعمل تست هيخلي الحاجة  تشتغل لايف كل ما حاجة تتغير 
وبنشيل الكاش عشان ميخزنش ويتقل الجهاز 

التست بتاعنا هيتعمل ف ملف ال app.e2e-spec.ts

ف الاول بنعمل حاجة اسمها دسكرايب ودي بنعرف فيها التست بتاعنا هيتعمل علي ايه بالظبط
وهي بتاخد اول بارام هو اسم التست بتاعنا 
والتاني هو الفنشكن اللي هتحصل واللي هو التست نفسه 
describe('App e2e', () => {
  احنا المفروض عايزين نعمل السرفر موديول اللي ف المين جي اس اللي موجود ف المين اب فولدر
  ف احنا محتاجين نعمل 
  1- حاجة تمكننا اننا نستخدم الابلكيشن سرفر هنا ف ملف التست دا 
  2- نربط بين السرفر و المين موديول بتاعنا اللي رابط بين كل الموديولز وبعض 
  3- كل الاوامر اللي كانت معمولة علي السرفر قبل ما نعمله رن محتاجين نعملها هنا 
  4- محتاجين نرن السرفر 

  let app: INestApplication; هنا احنا جبنا الاب سرفر عشان نقدر نستخدم الاوامر بتاعته

  الميثود دي بتخليني اعمل اوامر معينة قبل ما اعمل التست 
  beforeAll(async () => {
    دي طريقة تعريف الموديول بتاعنا ف بيئة التست 
    const moduleRef = await Test.createTestingModule({
      imports: [AppModule],
    }).compile(); بعد ما بنعرفه بنعمل كومبايل ليه 

    بعد كدا بتقول ان احنا عايزين نكريت نست ابلكيشن اللي هو السرفر اللي هو موجود ف ملف المين 
    من الاب موديول اللي احنا عملناله كومبايل 
    app = moduleRef.createNestApplication();
    بعد كدا لو في عندك اوامر كنت عاملها ف ملف المين بتحطها قبل ما تعمل لسن للسرفر
    app.useGlobalPipes(
      new ValidationPipe({
        whitelist: true,
      }),
    );
    بعد كدا بتلسن ع السرفر
    await app.init();
  });

  ف الفنكشن دي هيعمل اللي فيها بعد ما يخلص
  afterAll(async () => {
    app.close();
  });

  it.todo('should pass') 
});


// 
احنا وقت التست هنكون عايزين نعمل داتابيز خاصة بالتست 
بالتالي هنحط داتابيز جديدة علي بورت جديد ف الدوكر فايل 
بالتالي هنكون محتاجين نغير لينك الداتابيز عشان يبقا ع البورت الجديد ف ملف ال .env
عشان كدا المفروض هنعمل فايل تاني فيه المتغيرات الجديدة الخاصة بالتست وهنسميه .env.test
هتقابلنا مشكلة ان بريزما مبياخدش باله غير من الملف الاول اللي كان موجود 
بالتالي عايزين حاجة تغير الانفايرونمنت فايل دا وتخلي الاساسي والرئيسي هو بتاع التست ف حالة التست 
وفي باكدج هتخلينا نقدر نعمل دا ف حالة التست وهي dotenv

===
1- => npm i -D dotenv-cli
===
2- بعد كدا هنروح نعمل داتابيز جديدة خاصة بالتست ف ملف الدوكر 

version: '4.2'
services:
  dev-db:
    image: postgres:13
    ports:
      - 5434:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: nest
  test-db: دي الجديدة 
    image: postgres:13
    ports:
      - 5435:5432 وغيرنا البورت هنا
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: nest
===
3- هنعمل ملف التست انفايرونمنت ونحط فيه المتغيرت الجديدة 
===
4- هنحط سكربتات جديدة ف ملف الباكدج جيسون عشان التست 

  1- سكربتات الداتابيز 
  "prisma:test:deploy": "dotenv -e .env.test -- prisma migrate deploy",
  "db:test:rm": "docker compose rm test-db -s -f -v",
  "db:test:up": "docker compose up test-db -d",
  "db:test:restart": "npm run db:test:rm && npm run db:test:up && sleep 1 && npm run prisma:test:deploy",

  2- سكربتات رن التست
  "pretest:e2e": "npm run db:test:restart",
  "test:e2e": "dotenv -e .env.test -- jest --watch --no-cache --config ./test/jest-e2e.json"

  اما بتكتب pre مع اي امر انت كاتبه هنا ف هو هيتعمل تلقائي من غير ما تكتبه ك تحضير قبل الامر نفسه 
  احنا هنا عملنا "pretest:e2e" ف احنا اما نرن ال test:e2e ف الترمنال هو هيروح يعمل البري الاول لواحده
  بعدين هيروح يعمل الامر بتاع التست عادي 
===
5- الحتت اللي عايزين نغير فيها الانفايرونمنت فايل احنا بنحط ف الاوامر بتاعتها 
dotenv -e .env.test -- 
قبل الاوامر نفسها 

ودا بيقوله غير الانفايرونمنت فايل الاساسي ل اللي ف الباث اللي كتبناه جديد وهو .env.test 
وهو اتكتب كدا لانه معاه ف نفس الفولدر لو كان نستد كنا هنعمله نستد 
والافضل انه يكون ف نفس الفولدر
===
